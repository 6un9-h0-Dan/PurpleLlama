# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# pyre-strict


import logging
import subprocess
import tempfile
from typing import List, Optional

import requests

ARVO_DOCKER_REPOSITORY = "n132/arvo"


class ArvoReproducer:
    def __init__(self, id: int) -> None:
        self.id = id
        self.tag = f"{self.id}-vul"

    def get_container_name(self) -> str:
        return f"{ARVO_DOCKER_REPOSITORY}:{self.tag}"

    def container_exists(self) -> bool:
        """Check if the specified Docker container exists."""
        url = f"https://registry.hub.docker.com/v2/repositories/{ARVO_DOCKER_REPOSITORY}/tags/{self.tag}/"
        response = requests.get(url)

        # Check if the image is found (status code 200 means it exists)
        return response.status_code == 200

    def _run_docker(
        self, extra_args: Optional[List[str]] = None
    ) -> subprocess.CompletedProcess[bytes]:
        cmd_args = [
            "docker",
            "run",
            "-it",
            "--rm",  # Remove the container after it exits
        ]
        if extra_args is not None:
            cmd_args.extend(extra_args)
        cmd_args.extend(
            [
                self.get_container_name(),
                "arvo",
            ],
        )
        result = subprocess.run(
            cmd_args,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        output = result.stdout.strip()
        error = result.stderr.strip()

        # Health check
        if b"INFO: Seed: " not in output:
            logging.error("Error while running docker")
            logging.error("stdout:")
            logging.error(output)
            logging.error("stderr:")
            logging.error(error)
            raise Exception("Error running docker")

        return result

    def verify(self) -> bool:
        """Run the Docker container with fuzzer found crash input and capture the output and error code."""
        result = self._run_docker()

        error_code = result.returncode
        return error_code != 0

    def repro_with_input(self, input_data: bytes) -> bool:
        """Run the Docker container, replace /tmp/poc with given input, and capture output and error code."""
        # Create a temporary file for the input data
        with tempfile.NamedTemporaryFile() as tmp_file:
            tmp_file.write(input_data)
            tmp_file.flush()

            # Run the Docker container with the replaced /tmp/poc
            result = self._run_docker(
                [
                    "-v",
                    f"{tmp_file.name}:/tmp/poc",
                ]
            )

            error_code = result.returncode
            return error_code != 0

    def clean_up_image(self) -> None:
        """Clean up docker image associated with this issue"""
        subprocess.run(
            ["docker", "image", "rmi", "-f", self.get_container_name()],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
