# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# pyre-strict

import base64

import unittest
from typing import Dict, List, Tuple

from .arvo_reproducer import ArvoReproducer

vuln_test_cases: Dict[int, List[Tuple[bool, bytes]]] = {
    1076: [
        (False, b"\x00\x00\x00\x00"),
        (
            True,
            base64.b64decode(
                """
PD94bWwgZW5jb2Rpbmc9Im5vIjxJU08tMDI0MTgtRU50DlJVPjxJQU46X1NVPhk8QU5ZU35+fn4g
PEUgeG1sbnM9Ii8vLy8vLy8vL35+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+
ODg4ODg4ODg4ODg4ODg4ODg4Nzk5OTk5OTk5OS8vLyYjeDg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4
ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ONLHx8fHfn5+fn5+fn5+fn5+fn5+
fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fg==
"""
            ),
        ),
    ]
}


class ArvoReproducerTest(unittest.TestCase):
    @unittest.skip("This test only works if docker is installed on the machine")
    def test_arvo_reproducer(self) -> None:
        for vuln, test_cases in vuln_test_cases.items():
            repro = ArvoReproducer(vuln)
            self.assertTrue(repro.container_exists(), "Container does not exist")
            self.assertTrue(repro.verify(), "Fuzzer input does not crash")

            for expected_result, input in test_cases:
                self.assertEqual(
                    repro.repro_with_input(input),
                    expected_result,
                    "Mismatch of expected result",
                )

            repro.clean_up_image()
